# OAUTH PROVIDER

INSTALLED_APPS += [
  "oauth2_provider",
  "corsheaders",
]

MIDDLEWARE = [
  "corsheaders.middleware.CorsMiddleware",
  "oauth2_provider.middleware.OAuth2TokenMiddleware",
] + MIDDLEWARE

AUTHENTICATION_BACKENDS = [
  "oauth2_provider.backends.OAuth2Backend",
] + AUTHENTICATION_BACKENDS

DEFAULT_SCOPES = ["email", "profile", "peeringdb"]

CORS_ORIGIN_ALLOW_ALL = True

OAUTH2_PROVIDER = {
    'SCOPES': {
        'profile': 'user profile',
        'email': 'email address',
        'api_keys': '20c api keys',
        'provider:peeringdb': 'peeringdb entity associations',
    },
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https'],
    'REQUEST_APPROVAL_PROMPT': 'auto',
}

# SOCIAL AUTH

SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

# Supported backends

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'account.social_backends.peeringdb.PeeringDBOAuth2',
] + AUTHENTICATION_BACKENDS

# We are using postgres so make use of postgres json field

SOCIAL_AUTH_POSTGRES_JSONFIELD = True

# Template Context processors

TEMPLATES[0]["OPTIONS"]["context_processors"] += [
    'social_django.context_processors.backends',
    'social_django.context_processors.login_redirect',
]

# BACKEND: GoogleOAuth

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = "{{ oauth.google.client_id }}"
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "{{ oauth.google.secret }}"

# BACKEND: PeeringDB

PDB_ENDPOINT = "{{ peeringdb.url }}"
PDB_OAUTH_ACCESS_TOKEN_URL = '{}/oauth2/token/'.format(PDB_ENDPOINT)
PDB_OAUTH_AUTHORIZE_URL = '{}/oauth2/authorize/'.format(PDB_ENDPOINT)
PDB_OAUTH_PROFILE_URL = '{}/profile/v1'.format(PDB_ENDPOINT)

SOCIAL_AUTH_PEERINGDB_KEY = "{{ oauth.peeringdb.client_id }}"
SOCIAL_AUTH_PEERINGDB_SECRET = "{{ oauth.peeringdb.secret }}"

